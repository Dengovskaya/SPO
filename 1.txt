using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PacketDotNet;
using SharpPcap;

namespace Lab1PSP
{
    class Program
    {
        private static void device_OnPacketArrival(object sender, CaptureEventArgs e)
        {
            Packet packet = Packet.ParsePacket(e.Packet.LinkLayerType, e.Packet.Data);
            var ipPacket = IpPacket.GetEncapsulated(packet);
            if (ipPacket != null)
            {
                Console.WriteLine("Source adress is " + ipPacket.SourceAddress.ToString());
                Console.WriteLine("Destination adress is " + ipPacket.DestinationAddress.ToString());
                Console.WriteLine("Time of arrival " + e.Packet.Timeval.ToString());
                Console.WriteLine("Data lenth " + e.Packet.Data.Length.ToString());
            }

        }
        static void Main(string[] args)
        {
            // Retrieve the device list
            CaptureDeviceList devices = CaptureDeviceList.Instance;

            // If no devices were found print an error
            if (devices.Count < 1)
            {
                Console.WriteLine("No devices were found on this machine");
                return;
            }

            Console.WriteLine("\nThe following devices are available on this machine:");
            Console.WriteLine("______________________________________________________\n");

            // Print out the available network devices
            foreach (ICaptureDevice dev in devices)
                Console.WriteLine("{0}\n", dev.ToString());
            String deviceSwitcher;
            int deviceNumber = 0;
            Console.WriteLine("Choose the number of device (max - " + devices.Count + ")\n");
            Int32.TryParse(Console.ReadLine(), out deviceNumber);

            // Extract a device from the list
            ICaptureDevice device = devices[deviceNumber];
            device.OnPacketArrival += new SharpPcap.PacketArrivalEventHandler(device_OnPacketArrival);

            // Open the device for capturing
            int readTimeoutMilliseconds = 1000;
            device.Open(DeviceMode.Promiscuous, readTimeoutMilliseconds);

            Console.WriteLine("-- Listening on {0}, hit 'Enter' to stop...",
                device.Description);

            // Start the capturing process
            device.StartCapture();

            // Wait for 'Enter' from the user.
            Console.ReadLine();

            // Stop the capturing process
            device.StopCapture();

            // Close the pcap device
            device.Close();


            Console.Write("Hit 'Enter' to exit...");
            Console.ReadLine();


        }
    }

}
